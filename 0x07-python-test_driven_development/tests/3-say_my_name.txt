=====================
Using 3-say_my_name.py
======================

Defines function ``say_my_name(first_name, last_name="")``.

Usage
=====

``say_my_name(...)`` prints "My name is <first_name> <last_name>".

::
	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name("Martha", "Wanjiru")
	My name is Martha Wanjiru
::
	>>> say_my_name("Abby Florence", "Njiru")
        My name is Abby Florence Njiru
Parameter ```last_name``` is optional.If it is not provided, print empty string.
::
	>>> say_my_name("Martha")
        My name is Martha
Invalid Names
=============

Parameters ``first_name`` and ``last_name`` must be strings. Otherwise, raise TypeError.

::
	>>> say_my_name(6, "Brian")
	Traceback (most recent call last):
	TypeError: first_name must be a string
::
	>>> say_my_name("Pinerro", ["Nbas", "Teams", "Game"]))
	Traceback (most recent call last):
	TypeError: last_name must be a string
::
	>>> say_my_name({"Pinerro": 6, "Brian": 17}, 7.4)
	Traceback (most recent call last):
	TypeError: first_name must be a string
::
	>>> say_my_name(None)
	Traceback (most recent call last):
	TypeError: first_name must be a string
At least one name should be provided.
::
	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'
